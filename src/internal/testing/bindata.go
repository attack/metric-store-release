// Code generated by go-bindata. DO NOT EDIT.
// sources:
// certs/metric-store-ca.crl (934B)
// certs/metric-store-ca.crt (1.777kB)
// certs/metric-store-ca.key (3.243kB)
// certs/metric-store.crt (1.509kB)
// certs/metric-store.csr (895B)
// certs/metric-store.key (1.679kB)

package testing

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metricStoreCaCrl = []byte(`-----BEGIN X509 CRL-----
MIICiTBzAgEBMA0GCSqGSIb3DQEBCwUAMBoxGDAWBgNVBAMTD21ldHJpYy1zdG9y
ZS1jYRcNMjAwMzI0MTgyMTM0WhcNMjEwOTI0MTgyMTMzWjAAoCMwITAfBgNVHSME
GDAWgBQD6Z7gjHdkk3MIAf428ACUoM6YEjANBgkqhkiG9w0BAQsFAAOCAgEAqBAp
a9Bda1tpPXBpjfcAfPByu2VNiwlnwqNeGflZqwfE8Lw6Wv7iB1lwOGTAVVCCENIf
dRInNF4AJ/shEGX9FH4v2GbGPKw7S2+ZNxFZWgWdh7hyYJCRt3R7g0IVfmigL8oG
AoyZUHq5ptNx6S5F0jpKA+w5mh46+23gaS+1dO+E6DZZkEMI1N1F9VwGQpq3f+Co
4vQgurn88tBRnmmV7XJJfkDFgqHJIWK0fKHNgTwxj6gyq7BBTncXho7v6NOkI6Vz
dby2lnd78RFUNLMcP1nq9Qv8avNHe3sVZUsrr7hUPX91sUCFjljHHSY/B24Amhu3
NlwNjbj9PgDGzQNS8bsboxCQoYvn7VzpuH3wMtmSHppS/FatUrySy7s6NAfEm+67
zRQym0IXUOHMcbzVIrM+6pCU4AhXdK7gk8DPq7+X5faAEcXrRmzIuPnvSDdJyjLy
2oThKLZRdnMNL83PYsh9llNSdlA/PiitQ4H5Lsochxd2W1jmn4kiQPiyFli3LScu
nnvn7i17ODdnkr7EKe3lKLgMytzI+liHsVGoh+FatCtYy0W6OqMA0Ok6iPwDDEta
GFvPvx7fG1p5shsx0vNmMMV/xusdHTydPwhuw49/Z7jhGu003cG8MoOvRHsazcoc
Kf56Wcjuyi0MKCvrq0eXDQbUacLjDKG/mNBtwT8=
-----END X509 CRL-----
`)

func metricStoreCaCrlBytes() ([]byte, error) {
	return _metricStoreCaCrl, nil
}

func metricStoreCaCrl() (*asset, error) {
	bytes, err := metricStoreCaCrlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crl", size: 934, mode: os.FileMode(0444), modTime: time.Unix(1585074094, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x76, 0xcc, 0x5c, 0x61, 0x91, 0xe5, 0xe, 0xad, 0xe8, 0x4e, 0xc8, 0x23, 0x9a, 0xe9, 0xb4, 0x45, 0xe2, 0x29, 0x23, 0x47, 0xe, 0x72, 0xb4, 0x72, 0xfb, 0x1e, 0xcb, 0x7e, 0x8c, 0x87, 0xe0}}
	return a, nil
}

var _metricStoreCaCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIE9DCCAtygAwIBAgIBATANBgkqhkiG9w0BAQsFADAaMRgwFgYDVQQDEw9tZXRy
aWMtc3RvcmUtY2EwHhcNMjAwMzI0MTgyMTM0WhcNMjEwOTI0MTgyMTMzWjAaMRgw
FgYDVQQDEw9tZXRyaWMtc3RvcmUtY2EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAw
ggIKAoICAQDVjzrBZ8ucJFRgBGTN8THDZjTOMJo5W/xYSyTbaxUm6cihdEZqu38c
dNxa84R6CVWnMnNqy0u2zR7oXpfLj15C3MjFtomT2BQDpP2Ls7pRGUXOWXPMpBIS
VhBqvZAmnNYMqwSak6PPlVjcBFWbDB1L3gw4u/N1ZQhPmeVxiP31AqgeFKWCuELO
YnwLvOUp2BS2jITfYmMCklPU/YAX21slpIC1Ox7rU9oSY8YQ0pDLuY48Z9DIznuJ
DmthEiZ4l+v7sV6jdzzDDRHVICEAa9qACFp+VzY2VYjnTOjPIOXkN44g7H/EuhEp
L2JUT6ZyFOSJSTST5fZWgXWuP3z2af2fOaI+rOXDPZ5cWbtR7PVMirVpnnQuOjgK
cmiqPvOXnuEG8XLSEfX1WngWDNI4WPUpSiYdZhfse/x4SVaUs7kmlM7hfiQ91aJz
f2rtUzyrZN7UduInCWZGS12m9bRKpuyD/nuhSv+Vlkr9/ZmtZW3wyM4Rjo1JBm/f
YeoYRHpw8I8GmhhshYuVBNwpB6w4VcK3h+W09dJzIsGRKm94Vgkulw2X3Z0KsHak
namCwj7Vl0qlHEPVaeoWN2Fg9rR3SJTXS+pThLgKVpSNURxVUsXCU6wIsGb6sp7W
zsnkE9C8IaVPEYcRD3Xc9epGE5LUA1LvhI2xypqmSHw98R1OHFAa8wIDAQABo0Uw
QzAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU
A+me4Ix3ZJNzCAH+NvAAlKDOmBIwDQYJKoZIhvcNAQELBQADggIBABLjwllTcSkz
o+K7oNpLRNppRQS/RJVTQUFXv8sD1gU7K5rt+/pYffDJC3+D+9ZgdkYx67pFLOuf
TYjSJgc0qjYdpIuWS1VdHDJ+EuY3og1E6wOZsMYy7Q60BdXCea9g9KPznhFbzayV
UgYu6yFVO/4F1eyLvNViSKxykJbGVD04W29iiRYi5VCbwsEZWLvxF1h2tjqTnqLH
XxAb5Y2TyflS4QuBiTlADAbZZZkooCe+BAwsSd9SJXIjznHMnoYpeeiK8Wd7j26c
4EWOp3JRiI4+iYODQehk2MtGvDLkowyZAEXBRNz5uKiDfCpJMUpaqh0UW2m+pFvH
n/wDyj8twfGzDZjYWYj77jPEDvk2Yt7j63FeFa8JiMvfZeSE5gc149rCPmOusRx1
XYGsXVTedHf37naH1TrPKDTGeIF4MMyLOuX2W0ewPe0IfBkioeYqtJoOBtzr8urU
3t10VlbR5hIOYqobuGrpoYS/GnyqO1CQOyr211a0XIXjfKhG6mu2xknaaPBnGfji
hzLNP/d2wMMDnBUmk/KJFwHrNJAmqhm0OckL2itppw/jwdKnnRegrf+4yTBPNboD
4FmQ9oq32Uk9mGIqKqX7IoEwWMdryLGzApfH5685KjkcO2t3ukVV6ynuh4ov/MjG
7WBVOodLXLs90DeInGHme7RCbtXKY7Bp
-----END CERTIFICATE-----
`)

func metricStoreCaCrtBytes() ([]byte, error) {
	return _metricStoreCaCrt, nil
}

func metricStoreCaCrt() (*asset, error) {
	bytes, err := metricStoreCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crt", size: 1777, mode: os.FileMode(0444), modTime: time.Unix(1585074094, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xce, 0x8a, 0xbe, 0xbc, 0xc5, 0x8a, 0xb7, 0x9f, 0x5b, 0x50, 0xd1, 0x55, 0x3d, 0x8f, 0x4a, 0xf0, 0x80, 0x8a, 0x34, 0x18, 0x26, 0x6a, 0xcd, 0x8e, 0xea, 0x23, 0x20, 0xec, 0x60, 0x48, 0x46}}
	return a, nil
}

var _metricStoreCaKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
`)

func metricStoreCaKeyBytes() ([]byte, error) {
	return _metricStoreCaKey, nil
}

func metricStoreCaKey() (*asset, error) {
	bytes, err := metricStoreCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.key", size: 3243, mode: os.FileMode(0440), modTime: time.Unix(1585074094, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x7c, 0xd1, 0x3, 0x3e, 0xdd, 0xcf, 0xbc, 0x8, 0xfa, 0x94, 0x64, 0xa7, 0x4c, 0x26, 0x5, 0x8a, 0xa9, 0x43, 0xe8, 0xd6, 0x30, 0xb7, 0xae, 0x20, 0x19, 0x79, 0x1d, 0x5d, 0xf9, 0x97, 0x5}}
	return a, nil
}

var _metricStoreCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIELDCCAhSgAwIBAgIQQfZSz0Ro4T68lIOsjOvwDTANBgkqhkiG9w0BAQsFADAa
MRgwFgYDVQQDEw9tZXRyaWMtc3RvcmUtY2EwHhcNMjAwMzI0MTgyMTM0WhcNMjEw
OTI0MTgyMTMzWjAXMRUwEwYDVQQDEwxtZXRyaWMtc3RvcmUwggEiMA0GCSqGSIb3
DQEBAQUAA4IBDwAwggEKAoIBAQDOYVZHA2Gak7XzxLdc3yrnnRC1wT1hYn5kpPTS
tivloN6JQseNBAuOQsf/4zDqJLvzFKX/Y9uGfC/33/opN1PLEDl4xUm1iS405yWH
EWFfzZC6wwhvves8cizlXm1lehgXvqKwSjlXahqVtXJUj7bkYE71HTpRgp0dRknr
mVGnjaVLUj/OQM3d6/YBlFlodz1S7nZh0UboAm6OCQbqh7m8bHBrsfRCx9LV5raw
ypEDU3RCmcIkYJG52HUmEfUeBzM+6/UPL5kf0jNVvl3493DQWeVxFecIf+iDk1HT
X6bJKQBLm+BO+5qfbpBvndMFpoYgZl9fIbt51aSbBJdpQZMnAgMBAAGjcTBvMA4G
A1UdDwEB/wQEAwIDuDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHQYD
VR0OBBYEFFPOntX10wiwFT8lG5yzP548gcdIMB8GA1UdIwQYMBaAFAPpnuCMd2ST
cwgB/jbwAJSgzpgSMA0GCSqGSIb3DQEBCwUAA4ICAQB0gv7UienhaUUPbW+fdDmJ
Oh0P15cLv+/AQpFyue5oCQQrE3cBHxOHvO4pdLJH7Q0akuZNjCit3tuTiIwUeiei
NW+6PB6I2KMWXZ4+Bd/d15FfU4kjssnaRbjiQc3ce1oU57ZyaVdyupjor/LWMP0Q
+Ez1Uq0iAXz5ZxriIoBBzce8UMPyhLGfI2epD16dEtNkT8NUy4+NzW79W5iwm+6o
cueaCTcRy2a88P19dDl28J+47sypjX8AqrniBpnc4XgXc3TWqHRKwiBKFuga3TpG
E4EoZ6LjZQ1sVTLaW5lwyo1CL9ch+VDzs+MIM3ot/GlAnAaynxbWt9iiBrzLLqic
WSBTejPt48d9jfHu18Iy0QsCU2IDWTxJ9VDW47IFMpAD94aklc4FvP90o8b7gotz
hpyo6EHlWj18nc7syqXRD7QHOuHyVtxCafLWJQ9+m7+3Kpt8kOcFcJ1fzr21mkvf
WNRyOODP+nyPAiFUmh3BG+49lOolNH24xL8CbkkT7reaFHl/FWCrH/0bC4zzjr+R
O4nPFLRmK2BFwSFP+0iUWNlVGnmEqsJgMItCpUU39/FwIYqIXM3LRAMgKtKaaTKP
UPkuvSgSDPzitpuZNlGhQr3/wdrj4ACBWQQZcfbzTc/+MZhEuXf76fZla312sAIT
EW8joOV+NcvWayOUdcp33w==
-----END CERTIFICATE-----
`)

func metricStoreCrtBytes() ([]byte, error) {
	return _metricStoreCrt, nil
}

func metricStoreCrt() (*asset, error) {
	bytes, err := metricStoreCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.crt", size: 1509, mode: os.FileMode(0444), modTime: time.Unix(1585074094, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0x2b, 0x18, 0x3f, 0xa3, 0xd9, 0x58, 0x65, 0x73, 0x81, 0x51, 0x95, 0x2d, 0x33, 0xc3, 0xb7, 0xcd, 0x1b, 0xa8, 0x41, 0xe8, 0x11, 0xcb, 0x71, 0x4b, 0xa, 0x9c, 0x89, 0x12, 0xa, 0x3e, 0x2e}}
	return a, nil
}

var _metricStoreCsr = []byte(`-----BEGIN CERTIFICATE REQUEST-----
MIICXDCCAUQCAQAwFzEVMBMGA1UEAxMMbWV0cmljLXN0b3JlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzmFWRwNhmpO188S3XN8q550QtcE9YWJ+ZKT0
0rYr5aDeiULHjQQLjkLH/+Mw6iS78xSl/2Pbhnwv99/6KTdTyxA5eMVJtYkuNOcl
hxFhX82QusMIb73rPHIs5V5tZXoYF76isEo5V2oalbVyVI+25GBO9R06UYKdHUZJ
65lRp42lS1I/zkDN3ev2AZRZaHc9Uu52YdFG6AJujgkG6oe5vGxwa7H0QsfS1ea2
sMqRA1N0QpnCJGCRudh1JhH1HgczPuv1Dy+ZH9IzVb5d+Pdw0FnlcRXnCH/og5NR
01+mySkAS5vgTvuan26Qb53TBaaGIGZfXyG7edWkmwSXaUGTJwIDAQABoAAwDQYJ
KoZIhvcNAQELBQADggEBABlH+xmcb+3Dmb+rQt7R2mvUoQLFOICwS11QxI9oCJXF
AsT6ONCeNQTNUI6MyRrahV9rzalC6nx5BsNgO9cyvpDPYaZqcjNoaCnPpw6fWPmA
XzURZDMy0Kif8pBm+k+QDZXjpxm/a2Ba4XuTDxYC9Y2mN4EsN8B4+IN6OuFtXhdk
daMKtLgackK1Q7BRByoGkcHlpkUvL2vgmi5Wk14UyKN7BYaR+Xnq5lXbEWuEEis7
+99qc5G9uhf40IxKKlDPsuaM5bsa1rKBg0n1N9DiU051ZxxrsS8jkV+MEcmWuoAC
tVte1hPcZLrvJB/NjmP4jTpHUPrj8lzD9hN2m2HLoyI=
-----END CERTIFICATE REQUEST-----
`)

func metricStoreCsrBytes() ([]byte, error) {
	return _metricStoreCsr, nil
}

func metricStoreCsr() (*asset, error) {
	bytes, err := metricStoreCsrBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.csr", size: 895, mode: os.FileMode(0444), modTime: time.Unix(1585074094, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x30, 0xa9, 0x91, 0xc3, 0xd7, 0xe, 0x1e, 0x3f, 0xe7, 0x5b, 0xc3, 0xe2, 0xf5, 0x62, 0x96, 0x73, 0xe1, 0x53, 0xf9, 0xda, 0x13, 0x10, 0x90, 0xed, 0x93, 0x83, 0x71, 0x2c, 0x34, 0xf3, 0xcd}}
	return a, nil
}

var _metricStoreKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAzmFWRwNhmpO188S3XN8q550QtcE9YWJ+ZKT00rYr5aDeiULH
jQQLjkLH/+Mw6iS78xSl/2Pbhnwv99/6KTdTyxA5eMVJtYkuNOclhxFhX82QusMI
b73rPHIs5V5tZXoYF76isEo5V2oalbVyVI+25GBO9R06UYKdHUZJ65lRp42lS1I/
zkDN3ev2AZRZaHc9Uu52YdFG6AJujgkG6oe5vGxwa7H0QsfS1ea2sMqRA1N0QpnC
JGCRudh1JhH1HgczPuv1Dy+ZH9IzVb5d+Pdw0FnlcRXnCH/og5NR01+mySkAS5vg
Tvuan26Qb53TBaaGIGZfXyG7edWkmwSXaUGTJwIDAQABAoIBAQCIqCN9OlvzA0RE
ekoAkTXT0Ek0URTX22ReOGx06nP+xZsVwMZqNfeA5++PHV1SbaiWuWGBzxmZ37nT
pNf9Wsl9eOzVb63zKzcRiM1strGHwpLHWEXJ2DRf/iqEZxaBT2uMrYsEuOFnZLbd
0xw1qkQszSj7XbM0LgzjSZvBCfDrxMnqNFdABgM1nIynIEM1GpmZimiIVPv9mflW
GIKnvSfRPip/1NSbOVrb9P/GVlKxGvH327pulV5S61zspv0uHl6NhQkomEpY+SYv
b/9GcVznywF5RSd0RoGN9e+/GjKIGj4GcHXh1RM/WefqYxXXI93LhrrsBNCyGFlV
NlWaLaKBAoGBAPnp/FcxRWD9uz1lBCR7U+weY5/z2/h2Oou8s4EuZ1CBhnCBcYZy
bdNRG3fcCTW1IPXrp+3HStBSKPY5dzBZV/6O8C3dZFpUEdZT9fD3jcsmTjkWerNz
6NTmU/DmPP7bI4lHhxbd48BntVvFPxmeuJHdhQtZaUfGlvqAB5kJE32XAoGBANNn
8/NM4z5GS186ueluvmDfYcpzKgT5DHzbL8NqP1NFYyJat5zvoQ8Vs6Z+u6/5PVp6
0zwau34zOGF/xwBj9uNx4Ss8EtH18ffqXLb3c32jM/4RRqaC4Y94ZIJ5gBbL/Ywn
jk7F28TcNXhQu3UryUeJkphprW2YVqRcuwA2lWjxAoGABP7WWm/TsTKhMYL5aDlG
3itlVmcreHX0iaKF/AkPa56LL2iG+mcDJvwyDl1Jmdc7B29kde5L4ooh43oWldLT
XXVB+8i3Hs8bZCtdeSmZnfvwCFgYr8mbV9Yay2/uvDFpLm9NlfltegUYrPLuZfa0
PcYtyKJK5nJjxjIU9MwnpZUCgYB4mrlld9u8T0X4kfw12+PoSAf2AzVZmOsy36ik
Bx0RWGhx1OcjNOHhRTQ0K+DPR5Vk5OVVSLrmCDqGBOt2oZDbuMAIdkEWXwUntiAm
kYzlhBHJQ/nWTJx5yOkuNjqIxt9i8b4R2nbCHA61EPmgotY1ZZqoMMGr4Fitc+mK
+ZjLQQKBgQDEW1grF4KujeuxL9S0tP6jhjjfOOjFCPMvQfGy2IsFlWVIlE3eEsEe
XMeZa/no7YxdrWvtyrzVkni+3FdnbrhGAEnXJ4+u8G9N6vX7t1f2BEJAHMcwGGcU
8hDkd7+NsaPh1TONBxe84tYXPZWkk0zzNXgaapS6zoiduyzD5mZhyQ==
-----END RSA PRIVATE KEY-----
`)

func metricStoreKeyBytes() ([]byte, error) {
	return _metricStoreKey, nil
}

func metricStoreKey() (*asset, error) {
	bytes, err := metricStoreKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.key", size: 1679, mode: os.FileMode(0440), modTime: time.Unix(1585074094, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x2a, 0x50, 0xe1, 0x26, 0x7a, 0x75, 0x2e, 0x3a, 0x81, 0x23, 0x57, 0xbd, 0x1d, 0xb, 0x9c, 0x14, 0xf5, 0xc0, 0x47, 0x44, 0x63, 0xd, 0x10, 0xf, 0x51, 0xa9, 0x61, 0x36, 0xd5, 0x48, 0x3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metric-store-ca.crl": metricStoreCaCrl,
	"metric-store-ca.crt": metricStoreCaCrt,
	"metric-store-ca.key": metricStoreCaKey,
	"metric-store.crt":    metricStoreCrt,
	"metric-store.csr":    metricStoreCsr,
	"metric-store.key":    metricStoreKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metric-store-ca.crl": &bintree{metricStoreCaCrl, map[string]*bintree{}},
	"metric-store-ca.crt": &bintree{metricStoreCaCrt, map[string]*bintree{}},
	"metric-store-ca.key": &bintree{metricStoreCaKey, map[string]*bintree{}},
	"metric-store.crt":    &bintree{metricStoreCrt, map[string]*bintree{}},
	"metric-store.csr":    &bintree{metricStoreCsr, map[string]*bintree{}},
	"metric-store.key":    &bintree{metricStoreKey, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
