// Code generated by go-bindata. DO NOT EDIT.
// sources:
// certs/metric-store-ca.crl (934B)
// certs/metric-store-ca.crt (1.777kB)
// certs/metric-store-ca.key (3.243kB)
// certs/metric-store.crt (1.509kB)
// certs/metric-store.csr (895B)
// certs/metric-store.key (1.675kB)

package testing

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metricStoreCaCrl = []byte(`-----BEGIN X509 CRL-----
MIICiTBzAgEBMA0GCSqGSIb3DQEBCwUAMBoxGDAWBgNVBAMTD21ldHJpYy1zdG9y
ZS1jYRcNMjAwMzI0MjAwODE2WhcNMjEwOTI0MjAwODE1WjAAoCMwITAfBgNVHSME
GDAWgBSMWQmyjNl2oDWL4FzVXMJh/s0I0jANBgkqhkiG9w0BAQsFAAOCAgEAbvvc
WSXTHtm+K6SCLD42VrpEQ4MTha13/whZ92CzBlDpNAVZoZ9Etflk34/4yDZb0j0g
uTQynTURsmp/CRQbPpMdhZLMNEEMLcIN8g6XDXJCA3caCYbbrtuew0ZHaFV7mQ6I
QH6hcEStAq0ArjhdSYN52hK6f2G+ktcB0hW6Qj3XYQcOECFF6Q5z+gKPF9A5Piwn
sQoLKf4iGFQsghWyJpnOcemoW31BH4j79nn1krCBWn1fhTZMVQCR/KzDJ0IVoGED
BhUc7nyd9FLxwxBdj7D+wdts8wAtDbJY7MrxzbmmGO4dCIl5dl+LknXMZUWqoxMM
kqQlaX5Zz24WnvqJCCIL1pkzhI8jz1SeE3IEEPBVvhf4ZuYsrBelQ+3jfQTe6/zD
5HbWUUNmtkklKhwuumJQFa2gtJiSaXMLsfgCt/fmuSKuWhRVgQrq8qSMphXl0w0K
F2/gcWZ4BYwPE8Zjhn8SY3GRJhqlXu4f+g47QIJKxO22igAjcKyunnwSJXi2TVgk
iOpy0acGDvzbG8DklEfEvU6jtMa9irOHVIQ6fKuRYHd/SDyp2CwRzUozX9k+m/q3
8CDgFJIAnhy4uZOsSR65qxUmaMWV6jQioYYOzStB5BjHKJSdrIpA2Tpru+OoV4Vh
oRIHQM0MP8DJT69XWs8QXj7l6mCGA5KNbQkXjVg=
-----END X509 CRL-----
`)

func metricStoreCaCrlBytes() ([]byte, error) {
	return _metricStoreCaCrl, nil
}

func metricStoreCaCrl() (*asset, error) {
	bytes, err := metricStoreCaCrlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crl", size: 934, mode: os.FileMode(0444), modTime: time.Unix(1585080496, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x38, 0x7f, 0x33, 0x9a, 0x8b, 0x2c, 0x79, 0x8f, 0xeb, 0xd1, 0xb5, 0xb5, 0xa1, 0x3d, 0x37, 0x13, 0x75, 0x1a, 0x29, 0x52, 0x54, 0xb, 0x19, 0x90, 0xc2, 0x2e, 0x7a, 0x75, 0x78, 0xd1, 0x79}}
	return a, nil
}

var _metricStoreCaCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIE9DCCAtygAwIBAgIBATANBgkqhkiG9w0BAQsFADAaMRgwFgYDVQQDEw9tZXRy
aWMtc3RvcmUtY2EwHhcNMjAwMzI0MjAwODE2WhcNMjEwOTI0MjAwODE1WjAaMRgw
FgYDVQQDEw9tZXRyaWMtc3RvcmUtY2EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAw
ggIKAoICAQCz5Ch7hsRhrMxehfZiAsXMolfivGzseMMimlvTrvycBZrFwSKP6EKu
lyqWrAMb/Mck0coP09gD0mI/xhefjyNurvQmONmZUy0KwH19p9eXQ076MD1wu0y7
soV+4/OQ0SFQ1QC4wDp9AcNLSkQ9CTPZLfPS35jBZ8l8NpQ6bOOLQO7y0rhcjpNv
IAFnWavRhsCkNpUCFfrsJyQXpgVerTS9t/5jNpSS+yOGeR2cw7cCZP+5vWQRSLA1
WVKpR6mrsZnCqtwBdJAVkdJ9Ks7g3F/rif4BwS3eamMMgtE2rCbet7ZjsZLRqG6w
BbUYergXhiygzT5/JTvWn8fzAGtGGxJcf4K1zLsifqLbzLpmFYaO8jTUGedwkwgp
2EPqsajHEE4GnwrFWdKeXmcd3xySyPyVVbSFTU4i2JB6bM90ncFujVZ18qt8nc3T
34cT8syp33frm1kNUzkudlnWIlJGxYfmgXooSUFcW/Qsbq6nIHMAULdikF1Qw8A6
cW8++CoI2CoT1SfvjrrhxrZEfxY8Gi7J/i2pXK/bInSVk/FtE6iDUqAU+WR3C2lR
Yv+oP8iSPW5k8eU+q2lqEo17lcmipmaUcfmSKq/A0DK2zl5LBbaQfCV6NlLGFLmh
TSJTuSuM8oxbGawP2Hc1GwiepEfDMRmjzwcsZWnU5y7duTjBavYfFwIDAQABo0Uw
QzAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU
jFkJsozZdqA1i+Bc1VzCYf7NCNIwDQYJKoZIhvcNAQELBQADggIBAFWkty2VV55M
yoP7Que11a28xAYTAusCsTSXeoelNEZFaSWWdeptHD60tPBk8PkQvaQKrlabbw3a
leiyKjl1WF3mYNtXlVea146hmrfCTYUWV6kyMOTh8gc4tC3EvY0Y1slmv4eVDNT0
fbLF8UiPfoq4otbzJ6jHCNIsc+TjqR9+KnZzf1sCOjV+CkeIyCcio2Hx/KHTPduC
waRkf4NmeeO3fxODD5XvIkBYVIPTa//hMHKnqJts/z51dgpymUDh5mOjelr26e0I
nNVpIq1wuD2nRX26Quz8jtKJgznZ0d6KDS6eE56dE5KA7WJAdWBtOv7ThxFWUB3C
YjM7L9rdjN7/FM8351Eqm6eQUnNwKk8LosbKm129reZuaRFN25QQrbEhefIif0V3
JWKaj8Bu9MaPCq5U1NggSk9xXLvuiHFF6AJNVcp2QQVuEpRS1agY8z1NalJ3vSPr
AR4/j0UD/yfBX3JbdifDFkS6Ty1rX9ChaAjFcgeaUwMdwsimiuQztk6ZMwhX41l0
j4gniCl/mqrDom3iD5RwpCBmFirSyu3SO8hjj9CFpxcYOlh0B8m4Ke4yk4x+0EAP
YDGg3OJBdAlP5tJ9xW2s8YWund6nvDxQBhvTCYw1KYTALNxM7ZuW2ie5Kb4Q7YI5
a7yJvq14HGqAfGCz69DivKIiLZ7GjM2H
-----END CERTIFICATE-----
`)

func metricStoreCaCrtBytes() ([]byte, error) {
	return _metricStoreCaCrt, nil
}

func metricStoreCaCrt() (*asset, error) {
	bytes, err := metricStoreCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crt", size: 1777, mode: os.FileMode(0444), modTime: time.Unix(1585080496, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xcf, 0xe5, 0xf6, 0x9c, 0x5a, 0x42, 0x96, 0xa7, 0x4d, 0x7f, 0xd1, 0xdf, 0x27, 0x39, 0xfe, 0x8f, 0x11, 0x1e, 0xa2, 0x29, 0x7d, 0xb, 0x40, 0x99, 0xe9, 0xee, 0x95, 0xc9, 0x2d, 0x71, 0x30}}
	return a, nil
}

var _metricStoreCaKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
`)

func metricStoreCaKeyBytes() ([]byte, error) {
	return _metricStoreCaKey, nil
}

func metricStoreCaKey() (*asset, error) {
	bytes, err := metricStoreCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.key", size: 3243, mode: os.FileMode(0440), modTime: time.Unix(1585080496, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0x42, 0x54, 0xf7, 0x4a, 0xdc, 0xfb, 0xa7, 0x72, 0x33, 0xf9, 0x35, 0x3b, 0x33, 0xe9, 0x93, 0x35, 0xce, 0x32, 0x79, 0x54, 0xed, 0x1d, 0x90, 0x1a, 0xc, 0xe3, 0x8a, 0xd, 0x14, 0xc3, 0xd8}}
	return a, nil
}

var _metricStoreCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIELDCCAhSgAwIBAgIQWEFaInJL7woAgjijxrORmjANBgkqhkiG9w0BAQsFADAa
MRgwFgYDVQQDEw9tZXRyaWMtc3RvcmUtY2EwHhcNMjAwMzI0MjAwODE3WhcNMjEw
OTI0MjAwODE0WjAXMRUwEwYDVQQDEwxtZXRyaWMtc3RvcmUwggEiMA0GCSqGSIb3
DQEBAQUAA4IBDwAwggEKAoIBAQDRaL6QsT1tYZFSaUGEqWP/SzNjtOSIEHOqiDGb
NM7cRxA1TjC+wsW5HT6uSvV7IXqx71mZrNcUDLGZxScElRm75LhU7kKBF2ytSlTs
U5UsWtd8FKhqsDPA6sOF+k7rtWdfFwbiME/DhoHmaBn23eG4QorBYVhXVjmIYXw5
yTNAjFprVWQmN0oeve2U5/R4sheghlXwwBb+63SH9a/3IDlm828Lis8XabrRo1Hl
eMchfsIVybJDYbS4Ltcaj4xl6QMFLtv3FtalgzBSnPidl2clJs1HXnpRzZwOKc8R
BIXuePSLP4l3+HbB+aBqvaCR86VdBZUzxgl+0mBHD/NS7nofAgMBAAGjcTBvMA4G
A1UdDwEB/wQEAwIDuDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHQYD
VR0OBBYEFMuuxxb30nR4YH1sL+isxFPUkHmhMB8GA1UdIwQYMBaAFIxZCbKM2Xag
NYvgXNVcwmH+zQjSMA0GCSqGSIb3DQEBCwUAA4ICAQBR3Z3UdQYSZxrT5cZBOKpo
DUrxOgz41P9usUn0mxvWjPWNGYf7zoxxnqac+okWIp8N1b3ipMQTWbDk29A6SI7P
9cnlav4t2JnVAnp4fOQEWxcYhQQTeULz3llTHBJxWPrCUkXOHBR1zUsBXyUAkmG8
pfZSBqUH00HcGYCRE5Jw9i0wYsnO2V+AFIjFpj0CKjc0clrlXxlW2NsQB90grnSQ
u3XHi7xDWKrKkNx9j1mns57RPvlvyg3dcW5aFJu3VCRZhVMyW54RD9cFMgtPq+Ab
Hj93eFe/kG5eU6mk3B+KDYtyM2UZNw68hxzytcq91n1JvcyHylzeK7ZMUBGAxoyJ
s7ytqVtWQhliybpuDqXDsalLzOjXkdK/zqIig2XWHkAQDY9/K9ShKrpGil7mL2nE
YSZrutsus0sJChzwh6LFpEW1GnQ1FdxpCYYSyaFPM6CViyX4w9F6Jhp09MtFEoyG
vAmvmcyzpvXzkQU1neOVMH9dR5OZrZzJZMks65B2mBKrf23rtkafz4sFw+H1niZl
5pGPcM/92mtXYBrZ8w+QL00UpwXiam881UUvF/OXs3+5xjiqHl5Saafm8/8g3171
GG59CNJwUu0XEw65Xqs0RKFztuGPvzSKGTXHT2P3/X0i28HSaqYUgKMVHFpyXuo5
Zvl6f/ArpNAX2Sp3BXpc9w==
-----END CERTIFICATE-----
`)

func metricStoreCrtBytes() ([]byte, error) {
	return _metricStoreCrt, nil
}

func metricStoreCrt() (*asset, error) {
	bytes, err := metricStoreCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.crt", size: 1509, mode: os.FileMode(0444), modTime: time.Unix(1585080497, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0xab, 0x94, 0xfb, 0x6d, 0x31, 0x30, 0x7d, 0x15, 0x72, 0x8a, 0x15, 0x18, 0x19, 0x79, 0x96, 0xc8, 0x76, 0xb, 0xbe, 0x10, 0x4f, 0xc7, 0xd8, 0x17, 0x56, 0x8b, 0x25, 0x7a, 0x9b, 0x47, 0xf8}}
	return a, nil
}

var _metricStoreCsr = []byte(`-----BEGIN CERTIFICATE REQUEST-----
MIICXDCCAUQCAQAwFzEVMBMGA1UEAxMMbWV0cmljLXN0b3JlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0Wi+kLE9bWGRUmlBhKlj/0szY7TkiBBzqogx
mzTO3EcQNU4wvsLFuR0+rkr1eyF6se9ZmazXFAyxmcUnBJUZu+S4VO5CgRdsrUpU
7FOVLFrXfBSoarAzwOrDhfpO67VnXxcG4jBPw4aB5mgZ9t3huEKKwWFYV1Y5iGF8
OckzQIxaa1VkJjdKHr3tlOf0eLIXoIZV8MAW/ut0h/Wv9yA5ZvNvC4rPF2m60aNR
5XjHIX7CFcmyQ2G0uC7XGo+MZekDBS7b9xbWpYMwUpz4nZdnJSbNR156Uc2cDinP
EQSF7nj0iz+Jd/h2wfmgar2gkfOlXQWVM8YJftJgRw/zUu56HwIDAQABoAAwDQYJ
KoZIhvcNAQELBQADggEBAAM4zysb8KSqLiGQ2Cu9dp1VTo87kq8MZmnukMuk3VWQ
6pjcLowBWhSSMTBR4qeTNFm27Rh9ZVodIVOA/Q3ANJcxERnEFfAylAMhv1tyOTdZ
1NXUE2WlY1YxCy2ea8LJQ2HW8t9K883aqMnEsKQePNzW/3l2K2MyCabq2uBMlCe/
g3C/VpaGFaKJZgLb8Ca4Uo3MoAcxuBREVG679n0qgbemBXtQBH7CDR8TZNx5l0Hk
5I27Y7rmJEL2BkCOaaj929LhNLUBo4aiXgJoj9Vy62FHIoRUBOwtYuae8UG5BmvB
NJw5qqhOvB1Hf0n/z+XVnSqmA2WqhyQCN+lBiKB6l98=
-----END CERTIFICATE REQUEST-----
`)

func metricStoreCsrBytes() ([]byte, error) {
	return _metricStoreCsr, nil
}

func metricStoreCsr() (*asset, error) {
	bytes, err := metricStoreCsrBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.csr", size: 895, mode: os.FileMode(0444), modTime: time.Unix(1585080497, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x60, 0xc3, 0xc2, 0x63, 0xe9, 0x6c, 0xa0, 0xc8, 0x34, 0x61, 0xa7, 0xaa, 0x4, 0x11, 0xd3, 0xbf, 0x88, 0x2a, 0xcc, 0xfd, 0xa7, 0x33, 0x66, 0xd2, 0xbe, 0xea, 0x17, 0x19, 0x42, 0xbe, 0x4b}}
	return a, nil
}

var _metricStoreKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA0Wi+kLE9bWGRUmlBhKlj/0szY7TkiBBzqogxmzTO3EcQNU4w
vsLFuR0+rkr1eyF6se9ZmazXFAyxmcUnBJUZu+S4VO5CgRdsrUpU7FOVLFrXfBSo
arAzwOrDhfpO67VnXxcG4jBPw4aB5mgZ9t3huEKKwWFYV1Y5iGF8OckzQIxaa1Vk
JjdKHr3tlOf0eLIXoIZV8MAW/ut0h/Wv9yA5ZvNvC4rPF2m60aNR5XjHIX7CFcmy
Q2G0uC7XGo+MZekDBS7b9xbWpYMwUpz4nZdnJSbNR156Uc2cDinPEQSF7nj0iz+J
d/h2wfmgar2gkfOlXQWVM8YJftJgRw/zUu56HwIDAQABAoIBADq1ySe76WLvRdT7
GZld/GEo7kF4B9J1+lfHU1EWXyC2875eK6Bv7wtVPauT7HsXCdU1K8PAB5ThcjGQ
ar4IJ2zcVSnKmu6iaJ+1BVY0oNAMr/ljuUwgFoJxz1uSr+m5tD+erxlfPh2tamH0
scLatlv4m/pXlnL2A69O1YtF846WyTCAOag97ZAl05Cawr5mymyxuffJ+yCJ90KS
BC4fFnuZq9t6/Du62r8gPgIrEdvriZ5yxnGbfQy0lORDObllN4BjKxPUM1aSUO6u
DuixPdb8r2IPYWQlP1tvl0fLpeelnUwfyixub0B/jQ2kQQ32kutV0rualh4R+V9y
McR6u4ECgYEA7A0hXV2FFdNF0IjcFUW+ppeRBm/19Q4O3fxGxSb/OAsXLrK8RzeV
pjJLV8+D1/Bep3PcLoZ5UQhJVOlXAsj8jXAW4qx+p4n16lIPvncwbgHsWik8m6Fe
Zq2/r12jA8IgKWbHMKyEKw44lAYf/HdKnaLsQK35vG0fw27lt9il7GECgYEA4xs5
CkK5iR3AHy/LEN3wnZla3vYTdjLjOQyuvVWroKf1cwSkLeMEj1B4eubuxpQAHvOt
+AsD/rMwlW9/n14EqXIOs7mtH2F4mqvh8aI01ffcwsZRTfZsbctuvVD5mjP9Gl4b
zS+J3jStKKHKRZTbAi7YSo4HIQEzODPSDJIZ9n8CgYB06EPgA9NH7e0jzMSDXJmB
1IslDwpXpfDDDJDYT+oTDZsbq7YH54WcXEhoYwQ/THL0qDMib8Nh2KLJBQ/s9zHt
stgCx7+qpm8+8AmQIWPA9/7g4I993LvuSpsm9U8pK1nWZ2q7tpV25YIr/aSV21b/
H5O2rPOE2N7kYeYv2YLDwQKBgFLbDbZmnZYe2ocGQsnGjxCQcIzDrloDOs8Hh4Dg
Dpuwa2YpHVT4bCN1Ml90fUzJljm0oZXLPwvfiCwc36ze+khvqll7tmOqhfu4Fdi4
WxptMYeGHweYjfqIq8A6GLZfnUnPZ8k2PNBq23nlfQxhwH1NZe/dXVB3RZ6NmWao
rvw1AoGBAIGa/HTXhZCa4icxkOM+mcq799U2AUVBO90I2HaazO/v7NPf0/fxx2Do
ZwBDGeBDMTob43slDxh+FwXyhwXRNaUfv+KJZZOnbcOybuXbdsQPsKi3GzOUxFVP
NICX1dLIQYSkb44wkiPIjnvH+KCtB7iQ6Gm70e4N9gBlWSCoGCDC
-----END RSA PRIVATE KEY-----
`)

func metricStoreKeyBytes() ([]byte, error) {
	return _metricStoreKey, nil
}

func metricStoreKey() (*asset, error) {
	bytes, err := metricStoreKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.key", size: 1675, mode: os.FileMode(0440), modTime: time.Unix(1585080497, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x14, 0xa6, 0x6e, 0x1c, 0x0, 0xe0, 0x24, 0xcc, 0xcd, 0x2, 0xc6, 0x26, 0x6d, 0xfb, 0x27, 0x24, 0x13, 0x47, 0x82, 0x3, 0x35, 0x78, 0xe7, 0x4, 0x57, 0xd4, 0x8e, 0xe5, 0x5d, 0x59, 0x3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metric-store-ca.crl": metricStoreCaCrl,
	"metric-store-ca.crt": metricStoreCaCrt,
	"metric-store-ca.key": metricStoreCaKey,
	"metric-store.crt":    metricStoreCrt,
	"metric-store.csr":    metricStoreCsr,
	"metric-store.key":    metricStoreKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metric-store-ca.crl": &bintree{metricStoreCaCrl, map[string]*bintree{}},
	"metric-store-ca.crt": &bintree{metricStoreCaCrt, map[string]*bintree{}},
	"metric-store-ca.key": &bintree{metricStoreCaKey, map[string]*bintree{}},
	"metric-store.crt":    &bintree{metricStoreCrt, map[string]*bintree{}},
	"metric-store.csr":    &bintree{metricStoreCsr, map[string]*bintree{}},
	"metric-store.key":    &bintree{metricStoreKey, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
